{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EnergyService = /*#__PURE__*/(() => {\n  class EnergyService {\n    constructor(http) {\n      this.http = http; //private apiUrl = 'https://api.duck-curve-analysis.com/api';\n\n      this.apiUrl = './api';\n    }\n\n    zeroPad(value) {\n      let stringValue = value.toString();\n\n      if (stringValue.length < 2) {\n        stringValue = '0' + stringValue;\n      }\n\n      return stringValue;\n    }\n\n    getSolarValues() {\n      const url = `${this.apiUrl}/solar`;\n      return this.http.get(url);\n    }\n\n    getEnergyAverages(feed, mode, selectedDate) {\n      const url = `${this.apiUrl}/data/${feed}/average/${mode}/${this.zeroPad(selectedDate.getUTCFullYear())}-${this.zeroPad(selectedDate.getUTCMonth() + 1)}-${this.zeroPad(selectedDate.getUTCDate())}`;\n      console.log(selectedDate, selectedDate.getDate());\n      return this.http.get(url);\n    }\n\n    getEnergyForDate(feed, selectedDate) {\n      const url = `${this.apiUrl}/data/${feed}/day/${this.zeroPad(selectedDate.getUTCFullYear())}-${this.zeroPad(selectedDate.getUTCMonth() + 1)}-${this.zeroPad(selectedDate.getUTCDate())}`;\n      console.log(selectedDate, selectedDate.getDate());\n      return this.http.get(url);\n    }\n\n    handleError(err) {\n      // in a real world app, we may send the server to some remote logging infrastructure\n      // instead of just logging it to the console\n      let errorMessage = '';\n\n      if (err.error instanceof Error) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n      }\n\n      console.error(errorMessage);\n    }\n\n  }\n\n  EnergyService.ɵfac = function EnergyService_Factory(t) {\n    return new (t || EnergyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EnergyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EnergyService,\n    factory: EnergyService.ɵfac\n  });\n  return EnergyService;\n})();","map":null,"metadata":{},"sourceType":"module"}